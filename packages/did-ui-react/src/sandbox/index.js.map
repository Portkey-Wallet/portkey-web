{"version":3,"file":"index.js","sources":["../utils/sandboxService/types.ts","../utils/lib.ts","../utils/sandboxService/Service.ts","../utils/errorHandler.ts","../constants/index.ts","index.ts"],"sourcesContent":["import { ChainType } from '@portkey/types';\n// import { portkeyDidUIPrefix } from '../../constants';\n\nexport enum SandboxEventTypes {\n  getBalances = '@portkey/did-ui-sdk:getBalances',\n  // View\n  callViewMethod = '@portkey/did-ui-sdk:callViewMethod',\n  // Send\n  callSendMethod = '@portkey/did-ui-sdk:callSendMethod',\n  // getEncodedTx\n  getTransactionFee = '@portkey/did-ui-sdk:getTransactionFee',\n\n  initViewContract = '@portkey/did-ui-sdk:initViewContract',\n}\n\nexport enum SandboxErrorCode {\n  error,\n  success,\n} // 0 error 1 success\n\nexport type SandboxDispatchData = { code: SandboxErrorCode; message?: any };\n\nexport interface DispatchParam {\n  chainType: ChainType;\n  rpcUrl: string;\n  [x: string]: any;\n}\n","import EventEmitter from 'events';\nimport * as uuid from 'uuid';\n\nexport const eventBus = new EventEmitter();\n\nexport const isExtension = () => location.protocol === 'chrome-extension:';\n\nexport const randomId = () => uuid.v4().replace(/-/g, '');\n","import { DispatchParam, SandboxDispatchData, SandboxEventTypes } from './types';\nimport { randomId } from '../lib';\nimport { sleep } from '@portkey/utils';\n\nexport class SandboxEventService {\n  static async dispatch(event: SandboxEventTypes, data?: any, eleId = 'sandbox') {\n    let iframe = document.getElementById(eleId);\n    if (!iframe) {\n      await sleep(1000);\n      iframe = document.createElement('iframe');\n    }\n    const sid = randomId();\n    (iframe as any)?.contentWindow.postMessage(\n      {\n        event,\n        data: { ...data, sid },\n      },\n      '*',\n    );\n    return { event, sid };\n  }\n\n  static dispatchToOrigin(event: MessageEvent<any>, data?: SandboxDispatchData) {\n    event?.source?.postMessage({ ...data, eventName: event.data.event }, event.origin as any);\n  }\n\n  static listen({ event: eventName, sid }: { event: SandboxEventTypes; sid: string }): Promise<any> {\n    return new Promise((resolve) => {\n      window.addEventListener('message', (event) => {\n        if (event.data.eventName === eventName && event.data.sid === sid) resolve(event.data);\n      });\n    });\n  }\n  /**\n   *\n   * @param event - SandboxEventTypes\n   * @param data - when callView data is DispatchData, other any\n   * @param ele - element id\n   * @returns\n   */\n  static async dispatchAndReceive(event: SandboxEventTypes, data?: DispatchParam, eleId = 'sandbox') {\n    const dispatchKey = await SandboxEventService.dispatch(event, data, eleId);\n    return SandboxEventService.listen(dispatchKey);\n  }\n}\n","import { ErrorInfo, OnErrorFunc } from '../types';\nimport { message } from 'antd';\n\nexport const verifyErrorHandler = (error: any) => {\n  // let _error = isVerifyApiError(error);\n  let _error: string;\n  if (error?.type) {\n    _error = error.type;\n  } else if (typeof error === 'string') {\n    _error = error;\n  } else {\n    _error = error?.message || error?.error?.message || 'Verify error';\n  }\n  return _error;\n};\n\nexport const handleError = (error: any) => {\n  return error?.error || error;\n};\n\nexport const handleErrorMessage = (error: any, errorText?: string) => {\n  error = handleError(error);\n  if (!error) return errorText;\n  if (typeof error === 'string') return error;\n  if (typeof error.message === 'string') return error.message;\n  return errorText;\n};\n\nexport const handleErrorCode = (error: any) => {\n  return handleError(error)?.code;\n};\n\nexport const contractErrorHandler = (error: any) => {\n  if (typeof error === 'string') return error;\n  return error?.Error?.Message || error?.message?.Message || error?.message || error?.Error;\n};\n\nexport const errorTip = (errorInfo: ErrorInfo, isShowTip?: boolean, onError?: OnErrorFunc) => {\n  const msgError = errorInfo?.error?.error?.message || errorInfo?.error?.message || errorInfo?.error;\n  if (isShowTip) msgError && message.error(msgError);\n  onError?.(errorInfo);\n};\n\nexport const getMissParams = (obj: object): string | undefined => {\n  let _key;\n  Object.entries(obj)\n    .reverse()\n    .map(([key, value]) => {\n      if (!value) _key = key;\n    });\n  return _key;\n};\n","import { aelf } from '@portkey/utils';\nexport const COMMON_PRIVATE = 'f6e512a3c259e5f9af981d7f99d245aa5bc52fe448495e0b0dd56e8406be6f71';\n\nexport const SECOND = 1000;\nexport const MINUTE = SECOND * 60;\nexport const HOUR = MINUTE * 60;\nexport const DAY = HOUR * 24;\n\nexport const commonAccount = aelf.getWallet(COMMON_PRIVATE);\nexport const portkeyDidUIPrefix = '@portkey/did-ui-sdk:';\n","import { SandboxEventTypes, SandboxEventService, SandboxErrorCode } from '../utils/sandboxService';\nimport { aelf } from '@portkey/utils';\nimport { FetchRequest } from '@portkey/request';\nimport { ContractBasic, getContractBasic } from '@portkey/contracts';\nimport { getMissParams, handleErrorMessage } from '../utils/errorHandler';\nimport { COMMON_PRIVATE } from '../constants';\n\ntype SendBack = (\n  event: MessageEvent<any>,\n  response?: {\n    code: SandboxErrorCode;\n    message?: any;\n    sid: string;\n    error?: any;\n  },\n) => void;\ntype RpcUrl = string;\ntype ContractAddress = string;\ntype FromAccountPrivateKey = string;\nconst contracts: Record<RpcUrl, Record<ContractAddress, ContractBasic>> = {};\nconst accountContracts: Record<RpcUrl, Record<FromAccountPrivateKey, Record<ContractAddress, ContractBasic>>> = {};\n\nclass SandboxUtil {\n  constructor() {\n    this.listener();\n  }\n\n  static callback(\n    event: MessageEvent<any>,\n    response?: {\n      code: SandboxErrorCode;\n      message?: any;\n      sid: string;\n    },\n  ) {\n    SandboxEventService.dispatchToOrigin(event, response);\n  }\n\n  listener() {\n    window.addEventListener('message', async function (event) {\n      switch (event.data.event) {\n        case SandboxEventTypes.callViewMethod:\n          SandboxUtil.callViewMethod(event, SandboxUtil.callback);\n          break;\n        case SandboxEventTypes.callSendMethod:\n          SandboxUtil.callSendMethod(event, SandboxUtil.callback);\n          break;\n        case SandboxEventTypes.getTransactionFee:\n          SandboxUtil.getTransactionFee(event, SandboxUtil.callback);\n          break;\n        case SandboxEventTypes.initViewContract:\n          SandboxUtil.initViewContract(event, SandboxUtil.callback);\n          break;\n        default:\n          break;\n      }\n    });\n  }\n\n  static async initViewContract(event: MessageEvent<any>, callback: SendBack) {\n    const data = event.data.data ?? {};\n    try {\n      const { rpcUrl, address, chainType } = data;\n      // TODO only support aelf\n      if (chainType !== 'aelf') {\n        return callback(event, {\n          code: SandboxErrorCode.error,\n          message: 'Not support',\n          sid: data.sid,\n        });\n      }\n      await SandboxUtil._getELFViewContract(rpcUrl, address);\n      return callback(event, {\n        code: SandboxErrorCode.error,\n        message: 'Not Support',\n        sid: data.sid,\n      });\n    } catch (error) {\n      console.log(error, 'initViewContract===error');\n    }\n  }\n\n  static async _getELFViewContract(rpcUrl: string, address: string, privateKey: string = COMMON_PRIVATE) {\n    let _contract = contracts?.[rpcUrl]?.[address];\n    if (!_contract) {\n      _contract = await getContractBasic({\n        contractAddress: address,\n        account: aelf.getWallet(privateKey),\n        rpcUrl,\n      });\n      if (!contracts?.[rpcUrl]) contracts[rpcUrl] = {};\n      contracts[rpcUrl][address] = _contract;\n    }\n    return _contract;\n  }\n\n  static async _getELFSendContract(rpcUrl: string, address: string, privateKey: string) {\n    let _contract = accountContracts?.[rpcUrl]?.[privateKey]?.[address];\n    if (!_contract) {\n      _contract = await getContractBasic({\n        contractAddress: address,\n        account: aelf.getWallet(privateKey),\n        rpcUrl,\n      });\n      if (!accountContracts?.[rpcUrl]) accountContracts[rpcUrl] = {};\n      if (!accountContracts?.[rpcUrl]?.[privateKey]) accountContracts[rpcUrl][privateKey] = {};\n      accountContracts[rpcUrl][privateKey][address] = _contract;\n    }\n\n    return _contract;\n  }\n\n  static async callViewMethod(event: MessageEvent<any>, callback: SendBack) {\n    const data = event.data.data ?? {};\n    try {\n      const { rpcUrl, address, methodName, paramsOption = '', chainType } = data;\n      if (!rpcUrl || !address || !methodName)\n        return callback(event, {\n          code: SandboxErrorCode.error,\n          message: 'Invalid argument',\n          sid: data.sid,\n        });\n      // TODO only support aelf\n      if (chainType !== 'aelf') {\n        return callback(event, {\n          code: SandboxErrorCode.error,\n          message: 'Not support',\n          sid: data.sid,\n        });\n      }\n      const contract = await SandboxUtil._getELFViewContract(rpcUrl, address);\n      const result = await contract?.callViewMethod(methodName, paramsOption);\n      if (result.error)\n        return callback(event, {\n          code: SandboxErrorCode.error,\n          error: result.error,\n          sid: data.sid,\n        });\n      callback(event, {\n        code: SandboxErrorCode.success,\n        message: result.data,\n        sid: data.sid,\n      });\n    } catch (error: any) {\n      callback(event, {\n        code: SandboxErrorCode.error,\n        message: error?.error || error,\n        sid: data.sid,\n      });\n    }\n  }\n\n  static async callSendMethod(event: MessageEvent<any>, callback: SendBack) {\n    const data = event.data.data ?? {};\n\n    try {\n      const { rpcUrl, address, methodName, privateKey, paramsOption, chainType, isGetSignTx = 0, sendOptions } = data;\n      const missParams = getMissParams({\n        rpcUrl,\n        address,\n        methodName,\n      });\n      if (missParams)\n        return callback(event, {\n          code: SandboxErrorCode.error,\n          message: `Miss Param: ${missParams}`,\n          sid: data.sid,\n        });\n      // TODO only support aelf\n      if (chainType !== 'aelf') {\n        return callback(event, {\n          code: SandboxErrorCode.error,\n          message: 'Not support',\n          sid: data.sid,\n        });\n      }\n      const account = aelf.getWallet(privateKey);\n      const contract = await SandboxUtil._getELFSendContract(rpcUrl, address, privateKey);\n      const contractMethod = !isGetSignTx ? contract?.callSendMethod : contract?.encodedTx;\n      const req = await contractMethod?.(methodName, account, paramsOption, sendOptions);\n      if (req?.error)\n        return callback(event, {\n          code: SandboxErrorCode.error,\n          message: req.error?.message,\n          sid: data.sid,\n          error: req.error,\n        });\n      return callback(event, { code: SandboxErrorCode.success, message: req?.data, sid: data.sid });\n    } catch (e: any) {\n      callback(event, {\n        code: SandboxErrorCode.error,\n        message: handleErrorMessage(e),\n        sid: data.sid,\n      });\n    }\n  }\n\n  static async getTransactionFee(event: MessageEvent<any>, callback: SendBack) {\n    const data = event.data.data ?? {};\n    try {\n      const { rpcUrl, address, paramsOption, chainType, methodName, privateKey } = data;\n      // TODO only support aelf\n      if (chainType !== 'aelf') throw 'Not support';\n      const aelfInstance = aelf.getAelfInstance(rpcUrl);\n      const aelfContract = await SandboxUtil._getELFSendContract(rpcUrl, address, privateKey);\n      const raw = await aelf.encodedTx({\n        instance: aelfInstance,\n        contract: aelfContract,\n        functionName: methodName,\n        paramsOption,\n      });\n      if (raw.error) throw raw.error;\n      const customFetch = new FetchRequest({});\n\n      const transaction: any = await customFetch.send({\n        url: `${rpcUrl}/api/blockChain/calculateTransactionFee`,\n        method: 'POST',\n        params: {\n          RawTransaction: raw,\n        },\n      });\n\n      if (!transaction?.Success) throw 'Transaction failed';\n      callback(event, {\n        code: SandboxErrorCode.success,\n        message: transaction.TransactionFee,\n        sid: data.sid,\n      });\n    } catch (e) {\n      return callback(event, {\n        code: SandboxErrorCode.error,\n        message: e,\n        sid: data.sid,\n      });\n    }\n  }\n}\n\nnew SandboxUtil();\n"],"names":["SandboxEventTypes","SandboxErrorCode","i","EventEmitter","randomId","uuid","SandboxEventService","event","data","eleId","iframe","sleep","sid","eventName","resolve","dispatchKey","handleError","error","handleErrorMessage","errorText","getMissParams","obj","_key","key","value","COMMON_PRIVATE","aelf","contracts","accountContracts","SandboxUtil","response","callback","rpcUrl","address","chainType","privateKey","_contract","getContractBasic","methodName","paramsOption","result","isGetSignTx","sendOptions","missParams","account","contract","req","e","aelfInstance","aelfContract","raw","transaction","FetchRequest"],"mappings":"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"}