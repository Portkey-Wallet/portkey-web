import v from"events";import*as E from"uuid";import{sleep as F,aelf as g}from"@portkey/utils";import{FetchRequest as N}from"@portkey/request";import{getContractBasic as C}from"@portkey/contracts";import"antd";var w=(r=>(r.getBalances="@portkey/did-ui-sdk:getBalances",r.callViewMethod="@portkey/did-ui-sdk:callViewMethod",r.callSendMethod="@portkey/did-ui-sdk:callSendMethod",r.getTransactionFee="@portkey/did-ui-sdk:getTransactionFee",r.initViewContract="@portkey/did-ui-sdk:initViewContract",r))(w||{}),c=(r=>(r[r.error=0]="error",r[r.success=1]="success",r))(c||{});new v;const S=()=>E.v4().replace(/-/g,"");class T{static async dispatch(e,t,s="sandbox"){let a=document.getElementById(s);a||(await F(1e3),a=document.createElement("iframe"));const i=S();return a?.contentWindow.postMessage({event:e,data:{...t,sid:i}},"*"),{event:e,sid:i}}static dispatchToOrigin(e,t){e?.source?.postMessage({...t,eventName:e.data.event},e.origin)}static listen({event:e,sid:t}){return new Promise(s=>{window.addEventListener("message",a=>{a.data.eventName===e&&a.data.sid===t&&s(a.data)})})}static async dispatchAndReceive(e,t,s="sandbox"){const a=await T.dispatch(e,t,s);return T.listen(a)}}const O=r=>r?.error||r,L=(r,e)=>(r=O(r),r?typeof r=="string"?r:typeof r.message=="string"?r.message:e:e),U=r=>{let e;return Object.entries(r).reverse().map(([t,s])=>{s||(e=t)}),e},V="f6e512a3c259e5f9af981d7f99d245aa5bc52fe448495e0b0dd56e8406be6f71";g.getWallet(V);const y={},m={};class n{constructor(){this.listener()}static callback(e,t){T.dispatchToOrigin(e,t)}listener(){window.addEventListener("message",async function(e){switch(e.data.event){case w.callViewMethod:n.callViewMethod(e,n.callback);break;case w.callSendMethod:n.callSendMethod(e,n.callback);break;case w.getTransactionFee:n.getTransactionFee(e,n.callback);break;case w.initViewContract:n.initViewContract(e,n.callback);break}})}static async initViewContract(e,t){const s=e.data.data??{};try{const{rpcUrl:a,address:i,chainType:o}=s;return o!=="aelf"?t(e,{code:c.error,message:"Not support",sid:s.sid}):(await n._getELFViewContract(a,i),t(e,{code:c.error,message:"Not Support",sid:s.sid}))}catch(a){console.log(a,"initViewContract===error")}}static async _getELFViewContract(e,t,s=V){let a=y?.[e]?.[t];return a||(a=await C({contractAddress:t,account:g.getWallet(s),rpcUrl:e}),y?.[e]||(y[e]={}),y[e][t]=a),a}static async _getELFSendContract(e,t,s){let a=m?.[e]?.[s]?.[t];return a||(a=await C({contractAddress:t,account:g.getWallet(s),rpcUrl:e}),m?.[e]||(m[e]={}),m?.[e]?.[s]||(m[e][s]={}),m[e][s][t]=a),a}static async callViewMethod(e,t){const s=e.data.data??{};try{const{rpcUrl:a,address:i,methodName:o,paramsOption:l="",chainType:u}=s;if(!a||!i||!o)return t(e,{code:c.error,message:"Invalid argument",sid:s.sid});if(u!=="aelf")return t(e,{code:c.error,message:"Not support",sid:s.sid});const d=await(await n._getELFViewContract(a,i))?.callViewMethod(o,l);if(d.error)return t(e,{code:c.error,error:d.error,sid:s.sid});t(e,{code:c.success,message:d.data,sid:s.sid})}catch(a){t(e,{code:c.error,message:a?.error||a,sid:s.sid})}}static async callSendMethod(e,t){const s=e.data.data??{};try{const{rpcUrl:a,address:i,methodName:o,privateKey:l,paramsOption:u,chainType:d,isGetSignTx:k=0,sendOptions:M}=s,p=U({rpcUrl:a,address:i,methodName:o});if(p)return t(e,{code:c.error,message:`Miss Param: ${p}`,sid:s.sid});if(d!=="aelf")return t(e,{code:c.error,message:"Not support",sid:s.sid});const h=g.getWallet(l),b=await n._getELFSendContract(a,i,l),f=await(k?b?.encodedTx:b?.callSendMethod)?.(o,h,u,M);return f?.error?t(e,{code:c.error,message:f.error?.message,sid:s.sid,error:f.error}):t(e,{code:c.success,message:f?.data,sid:s.sid})}catch(a){t(e,{code:c.error,message:L(a),sid:s.sid})}}static async getTransactionFee(e,t){const s=e.data.data??{};try{const{rpcUrl:a,address:i,paramsOption:o,chainType:l,methodName:u,privateKey:d}=s;if(l!=="aelf")throw"Not support";const k=g.getAelfInstance(a),M=await n._getELFSendContract(a,i,d),p=await g.encodedTx({instance:k,contract:M,functionName:u,paramsOption:o});if(p.error)throw p.error;const h=await new N({}).send({url:`${a}/api/blockChain/calculateTransactionFee`,method:"POST",params:{RawTransaction:p}});if(!h?.Success)throw"Transaction failed";t(e,{code:c.success,message:h.TransactionFee,sid:s.sid})}catch(a){return t(e,{code:c.error,message:a,sid:s.sid})}}}new n;
//# sourceMappingURL=index.js.map
